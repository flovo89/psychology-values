{"version":3,"sources":["components/cardComponent.js","components/decisionComponent.js","components/resultComponent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CardComponent","info","classes","Card","className","CardContent","Typography","variant","component","color","theme","button","spacing","input","DecisionComponent","important","nimptext","imptext","Button","onClick","ResultComponent","list","map","value","index","key","App","useState","setTitle","setInfo","dataArray","setDataArray","currentIndex","setCurrentIndex","firstDataArray","setFirstDataArray","level","setLevel","showResult","setShowResult","buttonNotImpText","setButtonNotImpText","buttonImpText","setButtonImpText","useEffect","console","log","data","values","x","a","b","includes","q","split","replace","obj","temp","push","parseJson","importance","arr","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48028c77.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function CardComponent({title, info}) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {info}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardComponent from './cardComponent';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n    input: {\n      display: 'none',\n    },\n  }));\n\n  export default function DecisionComponent({title, info, important, nimptext, imptext}) {\n    const classes = useStyles();\n  \n    return (\n      <div>\n        <CardComponent title={title} info={info} />\n        <Button variant=\"contained\" className={classes.button} onClick={() => {important(false)}}>\n          {nimptext}\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => {important(true)}}>\n          {imptext}\n        </Button>\n      </div>\n    );\n  }","import React from 'react';\nimport CardComponent from './cardComponent';\n\n  export default function ResultComponent({list}) {\n  \n    return (\n      <div>\n          {\n            list.map((value, index) => {\n              return <CardComponent key={index} title={value.title} info={value.info} />\n            })\n          }\n      </div>\n    );\n  }","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DecisionComponent from './components/decisionComponent'\nimport ResultComponent from './components/resultComponent'\nimport data from './data/cards.json';\n\nfunction App() {\n\n  const [title, setTitle] = useState(\"testtitle\");\n  const [info, setInfo] = useState(\"testinfo\");\n  const [dataArray, setDataArray] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [firstDataArray, setFirstDataArray] = useState([]);\n  const [level, setLevel] = useState(1);\n  const [showResult, setShowResult] = useState(false);\n  const [buttonNotImpText, setButtonNotImpText] = useState(\"Nieważne dla mnie\");\n  const [buttonImpText, setButtonImpText] = useState(\"Ważne dla mnie\");\n\n  useEffect(() => {\n    function parseJson() {\n      console.log(\"done\");\n      for (let x of data.values) {\n        let a = x;\n        let b = \"-\";\n        if (x.includes(\"(\")) {\n          let q = x.split(\"(\");\n          a = q[0];\n          b = q[1].replace(\")\", \"\");\n        }\n        let obj = {\n          \"title\": a,\n          \"info\": b,\n        }\n        const temp = dataArray;\n        temp.push(obj);\n        setDataArray(temp);\n        setTitle(dataArray[currentIndex].title);\n        setInfo(dataArray[currentIndex].info);\n      }\n    }\n    parseJson();\n  }, []);\n\n\n  function setImportance(importance) {\n    if (importance) {\n      const arr = firstDataArray;\n      arr.push(dataArray[currentIndex]);\n      setFirstDataArray(arr);\n    }\n    \n    if (currentIndex+1 === dataArray.length) {\n      if (level === 2) {\n        setShowResult(true);\n      }\n      setLevel(level + 1);\n      setCurrentIndex(0);\n      setDataArray(firstDataArray);\n      setTitle(firstDataArray[0].title);\n      setInfo(firstDataArray[0].info);\n      setFirstDataArray([]);\n      setButtonNotImpText(\"Ważne dla mnie\");\n      setButtonImpText(\"Bardzo ważne dla mnie\");\n    } else {\n      setTitle(dataArray[currentIndex+1].title);\n      setInfo(dataArray[currentIndex+1].info);\n      setCurrentIndex(() => currentIndex+1);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          showResult ?\n            <>\n              {\"Important for you\"}\n              <ResultComponent list={dataArray}/>\n            </>\n            :\n            <>\n              {\"Level \" + level}\n              <DecisionComponent title={title} info={info} important={setImportance} nimptext={buttonNotImpText} imptext={buttonImpText}/>\n              {\"Progress: \" + (currentIndex+1) + \" / \" + dataArray.length}\n            </>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}